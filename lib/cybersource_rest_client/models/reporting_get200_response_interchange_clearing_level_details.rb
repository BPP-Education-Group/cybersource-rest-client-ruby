=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails
    attr_accessor :request_id

    attr_accessor :organization_id

    attr_accessor :account_id

    attr_accessor :processor_merchant_id

    attr_accessor :transaction_reference_number

    attr_accessor :merchant_reference_number

    attr_accessor :account_suffix

    attr_accessor :payment_sub_type

    attr_accessor :payment_sub_type_description

    attr_accessor :transaction_time

    attr_accessor :processed_time

    attr_accessor :transaction_type

    attr_accessor :amount

    # Valid ISO 4217 ALPHA-3 currency code
    attr_accessor :currency_code

    attr_accessor :price_type

    attr_accessor :price_amount_one

    attr_accessor :price_amount_two

    attr_accessor :re_class

    attr_accessor :settlement_time

    attr_accessor :settlement_processor

    attr_accessor :merchant_batch_number

    attr_accessor :cleared_level

    attr_accessor :billback_reason_code

    attr_accessor :billback_reason_description

    attr_accessor :merchant_priced_level

    attr_accessor :discount_rate

    attr_accessor :discount_amount

    attr_accessor :clearing_rate_amount_one

    attr_accessor :clearing_rate_amount_two

    attr_accessor :clearing_rate_amount_three

    # Valid ISO 4217 ALPHA-3 currency code
    attr_accessor :clearing_rate_currency_code

    attr_accessor :interchange_amount

    attr_accessor :billback_amount

    attr_accessor :settlement_amount

    # Valid ISO 4217 ALPHA-3 currency code
    attr_accessor :settlement_currency_code

    attr_accessor :conversion_rate

    attr_accessor :delta_cost

    attr_accessor :surcharge_amount

    attr_accessor :percent_rate_charged

    attr_accessor :per_transaction_charged

    attr_accessor :downgrade_reason_code

    attr_accessor :process_time

    attr_accessor :auth_code

    attr_accessor :batch_time

    attr_accessor :processor_batch_number

    attr_accessor :card_indicator

    attr_accessor :minimum_unit

    # Valid ISO 4217 ALPHA-3 currency code
    attr_accessor :minimum_unit_currency_code

    attr_accessor :credit_delta_indicator

    attr_accessor :fee_category

    attr_accessor :application_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'request_id' => :'requestId',
        :'organization_id' => :'organizationId',
        :'account_id' => :'accountId',
        :'processor_merchant_id' => :'processorMerchantId',
        :'transaction_reference_number' => :'transactionReferenceNumber',
        :'merchant_reference_number' => :'merchantReferenceNumber',
        :'account_suffix' => :'accountSuffix',
        :'payment_sub_type' => :'paymentSubType',
        :'payment_sub_type_description' => :'paymentSubTypeDescription',
        :'transaction_time' => :'transactionTime',
        :'processed_time' => :'processedTime',
        :'transaction_type' => :'transactionType',
        :'amount' => :'amount',
        :'currency_code' => :'currencyCode',
        :'price_type' => :'priceType',
        :'price_amount_one' => :'priceAmountOne',
        :'price_amount_two' => :'priceAmountTwo',
        :'re_class' => :'reClass',
        :'settlement_time' => :'settlementTime',
        :'settlement_processor' => :'settlementProcessor',
        :'merchant_batch_number' => :'merchantBatchNumber',
        :'cleared_level' => :'clearedLevel',
        :'billback_reason_code' => :'billbackReasonCode',
        :'billback_reason_description' => :'billbackReasonDescription',
        :'merchant_priced_level' => :'merchantPricedLevel',
        :'discount_rate' => :'discountRate',
        :'discount_amount' => :'discountAmount',
        :'clearing_rate_amount_one' => :'clearingRateAmountOne',
        :'clearing_rate_amount_two' => :'clearingRateAmountTwo',
        :'clearing_rate_amount_three' => :'clearingRateAmountThree',
        :'clearing_rate_currency_code' => :'clearingRateCurrencyCode',
        :'interchange_amount' => :'interchangeAmount',
        :'billback_amount' => :'billbackAmount',
        :'settlement_amount' => :'settlementAmount',
        :'settlement_currency_code' => :'settlementCurrencyCode',
        :'conversion_rate' => :'conversionRate',
        :'delta_cost' => :'deltaCost',
        :'surcharge_amount' => :'surchargeAmount',
        :'percent_rate_charged' => :'percentRateCharged',
        :'per_transaction_charged' => :'perTransactionCharged',
        :'downgrade_reason_code' => :'downgradeReasonCode',
        :'process_time' => :'processTime',
        :'auth_code' => :'authCode',
        :'batch_time' => :'batchTime',
        :'processor_batch_number' => :'processorBatchNumber',
        :'card_indicator' => :'cardIndicator',
        :'minimum_unit' => :'minimumUnit',
        :'minimum_unit_currency_code' => :'minimumUnitCurrencyCode',
        :'credit_delta_indicator' => :'creditDeltaIndicator',
        :'fee_category' => :'feeCategory',
        :'application_name' => :'applicationName'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'request_id' => :'request_id',
        :'organization_id' => :'organization_id',
        :'account_id' => :'account_id',
        :'processor_merchant_id' => :'processor_merchant_id',
        :'transaction_reference_number' => :'transaction_reference_number',
        :'merchant_reference_number' => :'merchant_reference_number',
        :'account_suffix' => :'account_suffix',
        :'payment_sub_type' => :'payment_sub_type',
        :'payment_sub_type_description' => :'payment_sub_type_description',
        :'transaction_time' => :'transaction_time',
        :'processed_time' => :'processed_time',
        :'transaction_type' => :'transaction_type',
        :'amount' => :'amount',
        :'currency_code' => :'currency_code',
        :'price_type' => :'price_type',
        :'price_amount_one' => :'price_amount_one',
        :'price_amount_two' => :'price_amount_two',
        :'re_class' => :'re_class',
        :'settlement_time' => :'settlement_time',
        :'settlement_processor' => :'settlement_processor',
        :'merchant_batch_number' => :'merchant_batch_number',
        :'cleared_level' => :'cleared_level',
        :'billback_reason_code' => :'billback_reason_code',
        :'billback_reason_description' => :'billback_reason_description',
        :'merchant_priced_level' => :'merchant_priced_level',
        :'discount_rate' => :'discount_rate',
        :'discount_amount' => :'discount_amount',
        :'clearing_rate_amount_one' => :'clearing_rate_amount_one',
        :'clearing_rate_amount_two' => :'clearing_rate_amount_two',
        :'clearing_rate_amount_three' => :'clearing_rate_amount_three',
        :'clearing_rate_currency_code' => :'clearing_rate_currency_code',
        :'interchange_amount' => :'interchange_amount',
        :'billback_amount' => :'billback_amount',
        :'settlement_amount' => :'settlement_amount',
        :'settlement_currency_code' => :'settlement_currency_code',
        :'conversion_rate' => :'conversion_rate',
        :'delta_cost' => :'delta_cost',
        :'surcharge_amount' => :'surcharge_amount',
        :'percent_rate_charged' => :'percent_rate_charged',
        :'per_transaction_charged' => :'per_transaction_charged',
        :'downgrade_reason_code' => :'downgrade_reason_code',
        :'process_time' => :'process_time',
        :'auth_code' => :'auth_code',
        :'batch_time' => :'batch_time',
        :'processor_batch_number' => :'processor_batch_number',
        :'card_indicator' => :'card_indicator',
        :'minimum_unit' => :'minimum_unit',
        :'minimum_unit_currency_code' => :'minimum_unit_currency_code',
        :'credit_delta_indicator' => :'credit_delta_indicator',
        :'fee_category' => :'fee_category',
        :'application_name' => :'application_name'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'request_id' => :'String',
        :'organization_id' => :'String',
        :'account_id' => :'String',
        :'processor_merchant_id' => :'String',
        :'transaction_reference_number' => :'String',
        :'merchant_reference_number' => :'String',
        :'account_suffix' => :'String',
        :'payment_sub_type' => :'String',
        :'payment_sub_type_description' => :'String',
        :'transaction_time' => :'DateTime',
        :'processed_time' => :'DateTime',
        :'transaction_type' => :'String',
        :'amount' => :'String',
        :'currency_code' => :'String',
        :'price_type' => :'String',
        :'price_amount_one' => :'String',
        :'price_amount_two' => :'String',
        :'re_class' => :'String',
        :'settlement_time' => :'DateTime',
        :'settlement_processor' => :'String',
        :'merchant_batch_number' => :'String',
        :'cleared_level' => :'String',
        :'billback_reason_code' => :'String',
        :'billback_reason_description' => :'String',
        :'merchant_priced_level' => :'String',
        :'discount_rate' => :'String',
        :'discount_amount' => :'String',
        :'clearing_rate_amount_one' => :'String',
        :'clearing_rate_amount_two' => :'String',
        :'clearing_rate_amount_three' => :'String',
        :'clearing_rate_currency_code' => :'String',
        :'interchange_amount' => :'String',
        :'billback_amount' => :'String',
        :'settlement_amount' => :'String',
        :'settlement_currency_code' => :'String',
        :'conversion_rate' => :'String',
        :'delta_cost' => :'String',
        :'surcharge_amount' => :'String',
        :'percent_rate_charged' => :'String',
        :'per_transaction_charged' => :'String',
        :'downgrade_reason_code' => :'String',
        :'process_time' => :'DateTime',
        :'auth_code' => :'String',
        :'batch_time' => :'DateTime',
        :'processor_batch_number' => :'String',
        :'card_indicator' => :'String',
        :'minimum_unit' => :'Integer',
        :'minimum_unit_currency_code' => :'String',
        :'credit_delta_indicator' => :'String',
        :'fee_category' => :'String',
        :'application_name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'requestId')
        self.request_id = attributes[:'requestId']
      end

      if attributes.has_key?(:'organizationId')
        self.organization_id = attributes[:'organizationId']
      end

      if attributes.has_key?(:'accountId')
        self.account_id = attributes[:'accountId']
      end

      if attributes.has_key?(:'processorMerchantId')
        self.processor_merchant_id = attributes[:'processorMerchantId']
      end

      if attributes.has_key?(:'transactionReferenceNumber')
        self.transaction_reference_number = attributes[:'transactionReferenceNumber']
      end

      if attributes.has_key?(:'merchantReferenceNumber')
        self.merchant_reference_number = attributes[:'merchantReferenceNumber']
      end

      if attributes.has_key?(:'accountSuffix')
        self.account_suffix = attributes[:'accountSuffix']
      end

      if attributes.has_key?(:'paymentSubType')
        self.payment_sub_type = attributes[:'paymentSubType']
      end

      if attributes.has_key?(:'paymentSubTypeDescription')
        self.payment_sub_type_description = attributes[:'paymentSubTypeDescription']
      end

      if attributes.has_key?(:'transactionTime')
        self.transaction_time = attributes[:'transactionTime']
      end

      if attributes.has_key?(:'processedTime')
        self.processed_time = attributes[:'processedTime']
      end

      if attributes.has_key?(:'transactionType')
        self.transaction_type = attributes[:'transactionType']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'currencyCode')
        self.currency_code = attributes[:'currencyCode']
      end

      if attributes.has_key?(:'priceType')
        self.price_type = attributes[:'priceType']
      end

      if attributes.has_key?(:'priceAmountOne')
        self.price_amount_one = attributes[:'priceAmountOne']
      end

      if attributes.has_key?(:'priceAmountTwo')
        self.price_amount_two = attributes[:'priceAmountTwo']
      end

      if attributes.has_key?(:'reClass')
        self.re_class = attributes[:'reClass']
      end

      if attributes.has_key?(:'settlementTime')
        self.settlement_time = attributes[:'settlementTime']
      end

      if attributes.has_key?(:'settlementProcessor')
        self.settlement_processor = attributes[:'settlementProcessor']
      end

      if attributes.has_key?(:'merchantBatchNumber')
        self.merchant_batch_number = attributes[:'merchantBatchNumber']
      end

      if attributes.has_key?(:'clearedLevel')
        self.cleared_level = attributes[:'clearedLevel']
      end

      if attributes.has_key?(:'billbackReasonCode')
        self.billback_reason_code = attributes[:'billbackReasonCode']
      end

      if attributes.has_key?(:'billbackReasonDescription')
        self.billback_reason_description = attributes[:'billbackReasonDescription']
      end

      if attributes.has_key?(:'merchantPricedLevel')
        self.merchant_priced_level = attributes[:'merchantPricedLevel']
      end

      if attributes.has_key?(:'discountRate')
        self.discount_rate = attributes[:'discountRate']
      end

      if attributes.has_key?(:'discountAmount')
        self.discount_amount = attributes[:'discountAmount']
      end

      if attributes.has_key?(:'clearingRateAmountOne')
        self.clearing_rate_amount_one = attributes[:'clearingRateAmountOne']
      end

      if attributes.has_key?(:'clearingRateAmountTwo')
        self.clearing_rate_amount_two = attributes[:'clearingRateAmountTwo']
      end

      if attributes.has_key?(:'clearingRateAmountThree')
        self.clearing_rate_amount_three = attributes[:'clearingRateAmountThree']
      end

      if attributes.has_key?(:'clearingRateCurrencyCode')
        self.clearing_rate_currency_code = attributes[:'clearingRateCurrencyCode']
      end

      if attributes.has_key?(:'interchangeAmount')
        self.interchange_amount = attributes[:'interchangeAmount']
      end

      if attributes.has_key?(:'billbackAmount')
        self.billback_amount = attributes[:'billbackAmount']
      end

      if attributes.has_key?(:'settlementAmount')
        self.settlement_amount = attributes[:'settlementAmount']
      end

      if attributes.has_key?(:'settlementCurrencyCode')
        self.settlement_currency_code = attributes[:'settlementCurrencyCode']
      end

      if attributes.has_key?(:'conversionRate')
        self.conversion_rate = attributes[:'conversionRate']
      end

      if attributes.has_key?(:'deltaCost')
        self.delta_cost = attributes[:'deltaCost']
      end

      if attributes.has_key?(:'surchargeAmount')
        self.surcharge_amount = attributes[:'surchargeAmount']
      end

      if attributes.has_key?(:'percentRateCharged')
        self.percent_rate_charged = attributes[:'percentRateCharged']
      end

      if attributes.has_key?(:'perTransactionCharged')
        self.per_transaction_charged = attributes[:'perTransactionCharged']
      end

      if attributes.has_key?(:'downgradeReasonCode')
        self.downgrade_reason_code = attributes[:'downgradeReasonCode']
      end

      if attributes.has_key?(:'processTime')
        self.process_time = attributes[:'processTime']
      end

      if attributes.has_key?(:'authCode')
        self.auth_code = attributes[:'authCode']
      end

      if attributes.has_key?(:'batchTime')
        self.batch_time = attributes[:'batchTime']
      end

      if attributes.has_key?(:'processorBatchNumber')
        self.processor_batch_number = attributes[:'processorBatchNumber']
      end

      if attributes.has_key?(:'cardIndicator')
        self.card_indicator = attributes[:'cardIndicator']
      end

      if attributes.has_key?(:'minimumUnit')
        self.minimum_unit = attributes[:'minimumUnit']
      end

      if attributes.has_key?(:'minimumUnitCurrencyCode')
        self.minimum_unit_currency_code = attributes[:'minimumUnitCurrencyCode']
      end

      if attributes.has_key?(:'creditDeltaIndicator')
        self.credit_delta_indicator = attributes[:'creditDeltaIndicator']
      end

      if attributes.has_key?(:'feeCategory')
        self.fee_category = attributes[:'feeCategory']
      end

      if attributes.has_key?(:'applicationName')
        self.application_name = attributes[:'applicationName']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          request_id == o.request_id &&
          organization_id == o.organization_id &&
          account_id == o.account_id &&
          processor_merchant_id == o.processor_merchant_id &&
          transaction_reference_number == o.transaction_reference_number &&
          merchant_reference_number == o.merchant_reference_number &&
          account_suffix == o.account_suffix &&
          payment_sub_type == o.payment_sub_type &&
          payment_sub_type_description == o.payment_sub_type_description &&
          transaction_time == o.transaction_time &&
          processed_time == o.processed_time &&
          transaction_type == o.transaction_type &&
          amount == o.amount &&
          currency_code == o.currency_code &&
          price_type == o.price_type &&
          price_amount_one == o.price_amount_one &&
          price_amount_two == o.price_amount_two &&
          re_class == o.re_class &&
          settlement_time == o.settlement_time &&
          settlement_processor == o.settlement_processor &&
          merchant_batch_number == o.merchant_batch_number &&
          cleared_level == o.cleared_level &&
          billback_reason_code == o.billback_reason_code &&
          billback_reason_description == o.billback_reason_description &&
          merchant_priced_level == o.merchant_priced_level &&
          discount_rate == o.discount_rate &&
          discount_amount == o.discount_amount &&
          clearing_rate_amount_one == o.clearing_rate_amount_one &&
          clearing_rate_amount_two == o.clearing_rate_amount_two &&
          clearing_rate_amount_three == o.clearing_rate_amount_three &&
          clearing_rate_currency_code == o.clearing_rate_currency_code &&
          interchange_amount == o.interchange_amount &&
          billback_amount == o.billback_amount &&
          settlement_amount == o.settlement_amount &&
          settlement_currency_code == o.settlement_currency_code &&
          conversion_rate == o.conversion_rate &&
          delta_cost == o.delta_cost &&
          surcharge_amount == o.surcharge_amount &&
          percent_rate_charged == o.percent_rate_charged &&
          per_transaction_charged == o.per_transaction_charged &&
          downgrade_reason_code == o.downgrade_reason_code &&
          process_time == o.process_time &&
          auth_code == o.auth_code &&
          batch_time == o.batch_time &&
          processor_batch_number == o.processor_batch_number &&
          card_indicator == o.card_indicator &&
          minimum_unit == o.minimum_unit &&
          minimum_unit_currency_code == o.minimum_unit_currency_code &&
          credit_delta_indicator == o.credit_delta_indicator &&
          fee_category == o.fee_category &&
          application_name == o.application_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [request_id, organization_id, account_id, processor_merchant_id, transaction_reference_number, merchant_reference_number, account_suffix, payment_sub_type, payment_sub_type_description, transaction_time, processed_time, transaction_type, amount, currency_code, price_type, price_amount_one, price_amount_two, re_class, settlement_time, settlement_processor, merchant_batch_number, cleared_level, billback_reason_code, billback_reason_description, merchant_priced_level, discount_rate, discount_amount, clearing_rate_amount_one, clearing_rate_amount_two, clearing_rate_amount_three, clearing_rate_currency_code, interchange_amount, billback_amount, settlement_amount, settlement_currency_code, conversion_rate, delta_cost, surcharge_amount, percent_rate_charged, per_transaction_charged, downgrade_reason_code, process_time, auth_code, batch_time, processor_batch_number, card_indicator, minimum_unit, minimum_unit_currency_code, credit_delta_indicator, fee_category, application_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
