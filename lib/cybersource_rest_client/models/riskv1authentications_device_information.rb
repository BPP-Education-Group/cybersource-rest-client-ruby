=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class Riskv1authenticationsDeviceInformation
    # IP address of the customer. 
    attr_accessor :ip_address

    attr_accessor :raw_data

    # Value of the Accept header sent by the customer’s web browser. **Note** If the customer’s browser provides a value, you must include it in your request. 
    attr_accessor :http_accept_browser_value

    # The exact content of the HTTP accept header. 
    attr_accessor :http_accept_content

    # Value of the User-Agent header sent by the customer’s web browser. Note If the customer’s browser provides a value, you must include it in your request. 
    attr_accessor :user_agent_browser_value

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ip_address' => :'ipAddress',
        :'raw_data' => :'rawData',
        :'http_accept_browser_value' => :'httpAcceptBrowserValue',
        :'http_accept_content' => :'httpAcceptContent',
        :'user_agent_browser_value' => :'userAgentBrowserValue'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'ip_address' => :'String',
        :'raw_data' => :'Array<Riskv1authenticationsDeviceInformationRawData>',
        :'http_accept_browser_value' => :'String',
        :'http_accept_content' => :'String',
        :'user_agent_browser_value' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ipAddress')
        self.ip_address = attributes[:'ipAddress']
      end

      if attributes.has_key?(:'rawData')
        if (value = attributes[:'rawData']).is_a?(Array)
          self.raw_data = value
        end
      end

      if attributes.has_key?(:'httpAcceptBrowserValue')
        self.http_accept_browser_value = attributes[:'httpAcceptBrowserValue']
      end

      if attributes.has_key?(:'httpAcceptContent')
        self.http_accept_content = attributes[:'httpAcceptContent']
      end

      if attributes.has_key?(:'userAgentBrowserValue')
        self.user_agent_browser_value = attributes[:'userAgentBrowserValue']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@ip_address.nil? && @ip_address.to_s.length > 15
        invalid_properties.push('invalid value for "ip_address", the character length must be smaller than or equal to 15.')
      end

      if !@http_accept_browser_value.nil? && @http_accept_browser_value.to_s.length > 255
        invalid_properties.push('invalid value for "http_accept_browser_value", the character length must be smaller than or equal to 255.')
      end

      if !@http_accept_content.nil? && @http_accept_content.to_s.length > 256
        invalid_properties.push('invalid value for "http_accept_content", the character length must be smaller than or equal to 256.')
      end

      if !@user_agent_browser_value.nil? && @user_agent_browser_value.to_s.length > 255
        invalid_properties.push('invalid value for "user_agent_browser_value", the character length must be smaller than or equal to 255.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@ip_address.nil? && @ip_address.to_s.length > 15
      return false if !@http_accept_browser_value.nil? && @http_accept_browser_value.to_s.length > 255
      return false if !@http_accept_content.nil? && @http_accept_content.to_s.length > 256
      return false if !@user_agent_browser_value.nil? && @user_agent_browser_value.to_s.length > 255
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] ip_address Value to be assigned
    def ip_address=(ip_address)
      if !ip_address.nil? && ip_address.to_s.length > 15
        fail ArgumentError, 'invalid value for "ip_address", the character length must be smaller than or equal to 15.'
      end

      @ip_address = ip_address
    end

    # Custom attribute writer method with validation
    # @param [Object] http_accept_browser_value Value to be assigned
    def http_accept_browser_value=(http_accept_browser_value)
      if !http_accept_browser_value.nil? && http_accept_browser_value.to_s.length > 255
        fail ArgumentError, 'invalid value for "http_accept_browser_value", the character length must be smaller than or equal to 255.'
      end

      @http_accept_browser_value = http_accept_browser_value
    end

    # Custom attribute writer method with validation
    # @param [Object] http_accept_content Value to be assigned
    def http_accept_content=(http_accept_content)
      if !http_accept_content.nil? && http_accept_content.to_s.length > 256
        fail ArgumentError, 'invalid value for "http_accept_content", the character length must be smaller than or equal to 256.'
      end

      @http_accept_content = http_accept_content
    end

    # Custom attribute writer method with validation
    # @param [Object] user_agent_browser_value Value to be assigned
    def user_agent_browser_value=(user_agent_browser_value)
      if !user_agent_browser_value.nil? && user_agent_browser_value.to_s.length > 255
        fail ArgumentError, 'invalid value for "user_agent_browser_value", the character length must be smaller than or equal to 255.'
      end

      @user_agent_browser_value = user_agent_browser_value
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ip_address == o.ip_address &&
          raw_data == o.raw_data &&
          http_accept_browser_value == o.http_accept_browser_value &&
          http_accept_content == o.http_accept_content &&
          user_agent_browser_value == o.user_agent_browser_value
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [ip_address, raw_data, http_accept_browser_value, http_accept_content, user_agent_browser_value].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
