=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class Ptsv2paymentsProcessingInformationBankTransferOptions
    # List of AVS flags that cause the request to be declined for AVS reasons. Use a space to separate the flags in the list. Important Make sure that you include the value N in the list if you want to receive declines for the AVS code N. 
    attr_accessor :decline_avs_flags

    # Authorization method used for the transaction. See \"SEC Codes,\" page 89.  TeleCheck Accepts only the following values: - **PPD** - **TEL** - **WEB** 
    attr_accessor :sec_code

    # City in which the terminal is located. If more than four alphanumeric characters are submitted, the transaction will be declined.  You cannot include any special characters. 
    attr_accessor :terminal_city

    # State in which the terminal is located. If more than two alphanumeric characters are submitted, the transaction will be declined.  You cannot include any special characters. 
    attr_accessor :terminal_state

    # Effective date for the transaction. The effective date must be within 45 days of the current day. If you do not include this value, CyberSource sets the effective date to the next business day.  Format: `MMDDYYYY`  Supported only for the CyberSource ACH Service. 
    attr_accessor :effective_date

    # Identifier for a partial payment or partial credit.  The value for each debit request or credit request must be unique within the scope of the order. See \"Multiple Partial Credits,\" page 41. 
    attr_accessor :partial_payment_id

    # Payment related information.  This information is included on the customer’s statement. 
    attr_accessor :customer_memo

    # Flag that indicates whether to process the payment.  Use with deferred payments. See \"Deferred and Partial Payments,\" page 37.  Possible values: - **0**: Standard debit with immediate payment (default). - **1**: For deferred payments, indicates that this is a deferred payment and that you will send a debit request with `paymentCategoryCode = 2` in the future. - **2**: For deferred payments, indicates notification to initiate payment.  Chase Paymentech Solutions and TeleCheck Use for deferred and partial payments.  CyberSource ACH Service Not used.  RBS WorldPay Atlanta Not used. 
    attr_accessor :payment_category_code

    # Method used for settlement.  Possible values: - **A**: Automated Clearing House (default for credits and for transactions using Canadian dollars) - **F**: Facsimile draft (U.S. dollars only) - **B**: Best possible (U.S. dollars only) (default if the field has not already been configured for your merchant ID)  See \"Settlement Delivery Methods,\" page 44. 
    attr_accessor :settlement_method

    # Level of fraud screening.  Possible values: - **1**: Validation — default if the field has not already been configured for your merchant ID - **2**: Verification  For a description of this feature and a list of supported processors, see \"Verification and Validation,\" page 24. 
    attr_accessor :fraud_screening_level

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'decline_avs_flags' => :'declineAvsFlags',
        :'sec_code' => :'secCode',
        :'terminal_city' => :'terminalCity',
        :'terminal_state' => :'terminalState',
        :'effective_date' => :'effectiveDate',
        :'partial_payment_id' => :'partialPaymentId',
        :'customer_memo' => :'customerMemo',
        :'payment_category_code' => :'paymentCategoryCode',
        :'settlement_method' => :'settlementMethod',
        :'fraud_screening_level' => :'fraudScreeningLevel'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'decline_avs_flags' => :'String',
        :'sec_code' => :'String',
        :'terminal_city' => :'String',
        :'terminal_state' => :'String',
        :'effective_date' => :'String',
        :'partial_payment_id' => :'String',
        :'customer_memo' => :'String',
        :'payment_category_code' => :'String',
        :'settlement_method' => :'String',
        :'fraud_screening_level' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'declineAvsFlags')
        self.decline_avs_flags = attributes[:'declineAvsFlags']
      end

      if attributes.has_key?(:'secCode')
        self.sec_code = attributes[:'secCode']
      end

      if attributes.has_key?(:'terminalCity')
        self.terminal_city = attributes[:'terminalCity']
      end

      if attributes.has_key?(:'terminalState')
        self.terminal_state = attributes[:'terminalState']
      end

      if attributes.has_key?(:'effectiveDate')
        self.effective_date = attributes[:'effectiveDate']
      end

      if attributes.has_key?(:'partialPaymentId')
        self.partial_payment_id = attributes[:'partialPaymentId']
      end

      if attributes.has_key?(:'customerMemo')
        self.customer_memo = attributes[:'customerMemo']
      end

      if attributes.has_key?(:'paymentCategoryCode')
        self.payment_category_code = attributes[:'paymentCategoryCode']
      end

      if attributes.has_key?(:'settlementMethod')
        self.settlement_method = attributes[:'settlementMethod']
      end

      if attributes.has_key?(:'fraudScreeningLevel')
        self.fraud_screening_level = attributes[:'fraudScreeningLevel']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@decline_avs_flags.nil? && @decline_avs_flags.to_s.length > 15
        invalid_properties.push('invalid value for "decline_avs_flags", the character length must be smaller than or equal to 15.')
      end

      if !@sec_code.nil? && @sec_code.to_s.length > 3
        invalid_properties.push('invalid value for "sec_code", the character length must be smaller than or equal to 3.')
      end

      if !@terminal_city.nil? && @terminal_city.to_s.length > 4
        invalid_properties.push('invalid value for "terminal_city", the character length must be smaller than or equal to 4.')
      end

      if !@terminal_state.nil? && @terminal_state.to_s.length > 2
        invalid_properties.push('invalid value for "terminal_state", the character length must be smaller than or equal to 2.')
      end

      if !@effective_date.nil? && @effective_date.to_s.length > 8
        invalid_properties.push('invalid value for "effective_date", the character length must be smaller than or equal to 8.')
      end

      if !@partial_payment_id.nil? && @partial_payment_id.to_s.length > 25
        invalid_properties.push('invalid value for "partial_payment_id", the character length must be smaller than or equal to 25.')
      end

      if !@customer_memo.nil? && @customer_memo.to_s.length > 80
        invalid_properties.push('invalid value for "customer_memo", the character length must be smaller than or equal to 80.')
      end

      if !@payment_category_code.nil? && @payment_category_code.to_s.length > 1
        invalid_properties.push('invalid value for "payment_category_code", the character length must be smaller than or equal to 1.')
      end

      if !@settlement_method.nil? && @settlement_method.to_s.length > 1
        invalid_properties.push('invalid value for "settlement_method", the character length must be smaller than or equal to 1.')
      end

      if !@fraud_screening_level.nil? && @fraud_screening_level.to_s.length > 1
        invalid_properties.push('invalid value for "fraud_screening_level", the character length must be smaller than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@decline_avs_flags.nil? && @decline_avs_flags.to_s.length > 15
      return false if !@sec_code.nil? && @sec_code.to_s.length > 3
      return false if !@terminal_city.nil? && @terminal_city.to_s.length > 4
      return false if !@terminal_state.nil? && @terminal_state.to_s.length > 2
      return false if !@effective_date.nil? && @effective_date.to_s.length > 8
      return false if !@partial_payment_id.nil? && @partial_payment_id.to_s.length > 25
      return false if !@customer_memo.nil? && @customer_memo.to_s.length > 80
      return false if !@payment_category_code.nil? && @payment_category_code.to_s.length > 1
      return false if !@settlement_method.nil? && @settlement_method.to_s.length > 1
      return false if !@fraud_screening_level.nil? && @fraud_screening_level.to_s.length > 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] decline_avs_flags Value to be assigned
    def decline_avs_flags=(decline_avs_flags)
      if !decline_avs_flags.nil? && decline_avs_flags.to_s.length > 15
        fail ArgumentError, 'invalid value for "decline_avs_flags", the character length must be smaller than or equal to 15.'
      end

      @decline_avs_flags = decline_avs_flags
    end

    # Custom attribute writer method with validation
    # @param [Object] sec_code Value to be assigned
    def sec_code=(sec_code)
      if !sec_code.nil? && sec_code.to_s.length > 3
        fail ArgumentError, 'invalid value for "sec_code", the character length must be smaller than or equal to 3.'
      end

      @sec_code = sec_code
    end

    # Custom attribute writer method with validation
    # @param [Object] terminal_city Value to be assigned
    def terminal_city=(terminal_city)
      if !terminal_city.nil? && terminal_city.to_s.length > 4
        fail ArgumentError, 'invalid value for "terminal_city", the character length must be smaller than or equal to 4.'
      end

      @terminal_city = terminal_city
    end

    # Custom attribute writer method with validation
    # @param [Object] terminal_state Value to be assigned
    def terminal_state=(terminal_state)
      if !terminal_state.nil? && terminal_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "terminal_state", the character length must be smaller than or equal to 2.'
      end

      @terminal_state = terminal_state
    end

    # Custom attribute writer method with validation
    # @param [Object] effective_date Value to be assigned
    def effective_date=(effective_date)
      if !effective_date.nil? && effective_date.to_s.length > 8
        fail ArgumentError, 'invalid value for "effective_date", the character length must be smaller than or equal to 8.'
      end

      @effective_date = effective_date
    end

    # Custom attribute writer method with validation
    # @param [Object] partial_payment_id Value to be assigned
    def partial_payment_id=(partial_payment_id)
      if !partial_payment_id.nil? && partial_payment_id.to_s.length > 25
        fail ArgumentError, 'invalid value for "partial_payment_id", the character length must be smaller than or equal to 25.'
      end

      @partial_payment_id = partial_payment_id
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_memo Value to be assigned
    def customer_memo=(customer_memo)
      if !customer_memo.nil? && customer_memo.to_s.length > 80
        fail ArgumentError, 'invalid value for "customer_memo", the character length must be smaller than or equal to 80.'
      end

      @customer_memo = customer_memo
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_category_code Value to be assigned
    def payment_category_code=(payment_category_code)
      if !payment_category_code.nil? && payment_category_code.to_s.length > 1
        fail ArgumentError, 'invalid value for "payment_category_code", the character length must be smaller than or equal to 1.'
      end

      @payment_category_code = payment_category_code
    end

    # Custom attribute writer method with validation
    # @param [Object] settlement_method Value to be assigned
    def settlement_method=(settlement_method)
      if !settlement_method.nil? && settlement_method.to_s.length > 1
        fail ArgumentError, 'invalid value for "settlement_method", the character length must be smaller than or equal to 1.'
      end

      @settlement_method = settlement_method
    end

    # Custom attribute writer method with validation
    # @param [Object] fraud_screening_level Value to be assigned
    def fraud_screening_level=(fraud_screening_level)
      if !fraud_screening_level.nil? && fraud_screening_level.to_s.length > 1
        fail ArgumentError, 'invalid value for "fraud_screening_level", the character length must be smaller than or equal to 1.'
      end

      @fraud_screening_level = fraud_screening_level
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          decline_avs_flags == o.decline_avs_flags &&
          sec_code == o.sec_code &&
          terminal_city == o.terminal_city &&
          terminal_state == o.terminal_state &&
          effective_date == o.effective_date &&
          partial_payment_id == o.partial_payment_id &&
          customer_memo == o.customer_memo &&
          payment_category_code == o.payment_category_code &&
          settlement_method == o.settlement_method &&
          fraud_screening_level == o.fraud_screening_level
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [decline_avs_flags, sec_code, terminal_city, terminal_state, effective_date, partial_payment_id, customer_memo, payment_category_code, settlement_method, fraud_screening_level].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
