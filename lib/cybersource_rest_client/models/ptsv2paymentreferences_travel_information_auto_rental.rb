=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class Ptsv2paymentreferencesTravelInformationAutoRental
    # Merchant to send their auto rental company name 
    attr_accessor :company_name

    # When merchant wants to send the affiliate name. 
    attr_accessor :affiliate_name

    attr_accessor :rental_address

    attr_accessor :return_address

    # Date/time the auto was returned to the rental agency. Format: ``yyyy-MM-dd HH-mm-ss z`` This field is supported for Visa, MasterCard, and American Express. 
    attr_accessor :return_date_time

    # Date/time the auto was picked up from the rental agency. Format: `yyyy-MM-dd HH-mm-ss z` This field is supported for Visa, MasterCard, and American Express. 
    attr_accessor :rental_date_time

    # Name of the individual making the rental agreement.  Valid data lengths by card:  |Card Specific Validation|VISA|MasterCard|Discover|AMEX| |--- |--- |--- |--- | | Filed Length| 40| 40| 29| 26| | Field Type| AN| ANS| AN| AN| | M/O/C| O| M| M| M| 
    attr_accessor :customer_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'company_name' => :'companyName',
        :'affiliate_name' => :'affiliateName',
        :'rental_address' => :'rentalAddress',
        :'return_address' => :'returnAddress',
        :'return_date_time' => :'returnDateTime',
        :'rental_date_time' => :'rentalDateTime',
        :'customer_name' => :'customerName'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'company_name' => :'company_name',
        :'affiliate_name' => :'affiliate_name',
        :'rental_address' => :'rental_address',
        :'return_address' => :'return_address',
        :'return_date_time' => :'return_date_time',
        :'rental_date_time' => :'rental_date_time',
        :'customer_name' => :'customer_name'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'company_name' => :'String',
        :'affiliate_name' => :'String',
        :'rental_address' => :'Ptsv2paymentsTravelInformationAutoRentalRentalAddress',
        :'return_address' => :'Ptsv2paymentsTravelInformationAutoRentalReturnAddress',
        :'return_date_time' => :'String',
        :'rental_date_time' => :'String',
        :'customer_name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'companyName')
        self.company_name = attributes[:'companyName']
      end

      if attributes.has_key?(:'affiliateName')
        self.affiliate_name = attributes[:'affiliateName']
      end

      if attributes.has_key?(:'rentalAddress')
        self.rental_address = attributes[:'rentalAddress']
      end

      if attributes.has_key?(:'returnAddress')
        self.return_address = attributes[:'returnAddress']
      end

      if attributes.has_key?(:'returnDateTime')
        self.return_date_time = attributes[:'returnDateTime']
      end

      if attributes.has_key?(:'rentalDateTime')
        self.rental_date_time = attributes[:'rentalDateTime']
      end

      if attributes.has_key?(:'customerName')
        self.customer_name = attributes[:'customerName']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] company_name Value to be assigned
    def company_name=(company_name)
      @company_name = company_name
    end

    # Custom attribute writer method with validation
    # @param [Object] affiliate_name Value to be assigned
    def affiliate_name=(affiliate_name)
      @affiliate_name = affiliate_name
    end

    # Custom attribute writer method with validation
    # @param [Object] return_date_time Value to be assigned
    def return_date_time=(return_date_time)
      @return_date_time = return_date_time
    end

    # Custom attribute writer method with validation
    # @param [Object] rental_date_time Value to be assigned
    def rental_date_time=(rental_date_time)
      @rental_date_time = rental_date_time
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_name Value to be assigned
    def customer_name=(customer_name)
      @customer_name = customer_name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          company_name == o.company_name &&
          affiliate_name == o.affiliate_name &&
          rental_address == o.rental_address &&
          return_address == o.return_address &&
          return_date_time == o.return_date_time &&
          rental_date_time == o.rental_date_time &&
          customer_name == o.customer_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [company_name, affiliate_name, rental_address, return_address, return_date_time, rental_date_time, customer_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
