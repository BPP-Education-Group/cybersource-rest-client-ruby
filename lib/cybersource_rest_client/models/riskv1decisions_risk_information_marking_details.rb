=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  # Details for marking the transaction as either positive or negative.
  class Riskv1decisionsRiskInformationMarkingDetails
    # Notes or details that explain the reasons for adding the transaction to either the positive or negative list.
    attr_accessor :notes

    # Reason for adding the transaction to the negative list. This field can contain one of the following values: - fraud_chargeback: You have received a fraud-related chargeback for the transaction. - non_fraud_chargeback: You have received a non-fraudulent chargeback for the transaction. - suspected: You believe that you will probably receive a chargeback for the transaction. - creditback: You issued a refund to the customer to avoid a chargeback for the transaction. 
    attr_accessor :reason

    # Adds specified transaction information to the negative list. This field can contain one or more of the following values. When you specify more than one value, separate them with commas (,). - account_key_hash - customer_account_id - customer_email - customer_ipaddress - customer_phone - device_fingerprint - ship_address If no value is specified, account_key_hash, customer_email, and ship_address are used by default. Note account_key_hash adds the field that contains the card number (customer_cc_number). 
    attr_accessor :fields_included

    # Indicates whether to add, clear, or remove order data from the fraud history. This field can contain one of the following values: - ST: Marking reason for suspected fraud transaction; same action as Mark as Suspect link in the Business Center - CB: Marking reason for chargeback; same action as Mark as Suspect link - CM: Clear suspected fraud marking reason; same action as Clear Mark as Suspect link - VT: Remove from history 
    attr_accessor :report_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'notes' => :'notes',
        :'reason' => :'reason',
        :'fields_included' => :'fieldsIncluded',
        :'report_code' => :'reportCode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'notes' => :'String',
        :'reason' => :'String',
        :'fields_included' => :'String',
        :'report_code' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.has_key?(:'reason')
        self.reason = attributes[:'reason']
      end

      if attributes.has_key?(:'fieldsIncluded')
        self.fields_included = attributes[:'fieldsIncluded']
      end

      if attributes.has_key?(:'reportCode')
        self.report_code = attributes[:'reportCode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@notes.nil? && @notes.to_s.length > 255
        invalid_properties.push('invalid value for "notes", the character length must be smaller than or equal to 255.')
      end

      if !@reason.nil? && @reason.to_s.length > 25
        invalid_properties.push('invalid value for "reason", the character length must be smaller than or equal to 25.')
      end

      if !@fields_included.nil? && @fields_included.to_s.length > 255
        invalid_properties.push('invalid value for "fields_included", the character length must be smaller than or equal to 255.')
      end

      if !@report_code.nil? && @report_code.to_s.length > 2
        invalid_properties.push('invalid value for "report_code", the character length must be smaller than or equal to 2.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@notes.nil? && @notes.to_s.length > 255
      return false if !@reason.nil? && @reason.to_s.length > 25
      return false if !@fields_included.nil? && @fields_included.to_s.length > 255
      return false if !@report_code.nil? && @report_code.to_s.length > 2
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] notes Value to be assigned
    def notes=(notes)
      if !notes.nil? && notes.to_s.length > 255
        fail ArgumentError, 'invalid value for "notes", the character length must be smaller than or equal to 255.'
      end

      @notes = notes
    end

    # Custom attribute writer method with validation
    # @param [Object] reason Value to be assigned
    def reason=(reason)
      if !reason.nil? && reason.to_s.length > 25
        fail ArgumentError, 'invalid value for "reason", the character length must be smaller than or equal to 25.'
      end

      @reason = reason
    end

    # Custom attribute writer method with validation
    # @param [Object] fields_included Value to be assigned
    def fields_included=(fields_included)
      if !fields_included.nil? && fields_included.to_s.length > 255
        fail ArgumentError, 'invalid value for "fields_included", the character length must be smaller than or equal to 255.'
      end

      @fields_included = fields_included
    end

    # Custom attribute writer method with validation
    # @param [Object] report_code Value to be assigned
    def report_code=(report_code)
      if !report_code.nil? && report_code.to_s.length > 2
        fail ArgumentError, 'invalid value for "report_code", the character length must be smaller than or equal to 2.'
      end

      @report_code = report_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          notes == o.notes &&
          reason == o.reason &&
          fields_included == o.fields_included &&
          report_code == o.report_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [notes, reason, fields_included, report_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
