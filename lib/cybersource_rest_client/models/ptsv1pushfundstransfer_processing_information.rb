=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'date'

module CyberSource
  class Ptsv1pushfundstransferProcessingInformation
    # Money Transfer (MT) - `AA`: Account to Account - `BI`: Bank-Initiated Money Transfer - `CD`: Cash Deposit - `FT`: Funds Transfer - `TU`: Prepaid Card Loan - `WT`: Wallet Transfer-Staged Digital Wallet (SDW) Transfer - `PP`: P2P Money Transfer  Funds Disbursement (FD) - `BB`: Business-to-business Supplier Payments - `BP`: Non-Card Bill Pay  - `CP`: Credit Card Bill Pay - `FD`: General Funds Disbursements - `GD`: Government Disbursements and Government Initiated Tax Refunds - `GP`: Gambling/Gaming Payouts (other than online gaming) - `LO`: Loyalty Payments - `MD`: Merchant Settlement - `MI`: Faster Refunds - `OG`: Online Gambling Payouts - `PD`: Payroll and Pension Disbursements - `RP`: Request-to-Pay Service 
    attr_accessor :business_application_id

    attr_accessor :payouts_options

    # Fee Program Indicator. This field identifies the interchange fee program applicable to each financial transaction. Fee program indicator (FPI) values correspond to the fee descriptor and rate for each existing fee program. 
    attr_accessor :fee_program_id

    # Merchant payment gateway ID that is assigned by Mastercard and is provided by the acquirer when a registered merchant payment gateway service provider is involved in the transaction. 
    attr_accessor :network_partner_id

    # This field contains coding that identifies (1) the customer transaction type and (2) the customer account types affected by the transaction.  Default: 5402 (Original Credit Transaction)  Contains codes that combined with some other fields such as the BAI (Business Application Id) identify some unique use cases. For Sales Tax rebates this field should be populated with the value 5120 (Value-added tax/Sales Tax) along with the businessApplicationId field set to the value 'FD' which indicates this push funds transfer is being conducted in order to facilitate a sales tax refund. 
    attr_accessor :processing_code

    # This U.S.-only field is optionally used by PIN Debit Gateway Service participants (merchants and acquirers) to specify the network access priority. VisaNet checks to determine if there are issuer routing preferences for a network specified by the sharing group code. If an issuer preference exists for one of the specified debit networks, VisaNet makes a routing selection based on issuer preference. If an preference exists for multiple specified debit networks, or if no issuer preference exists, VisaNet makes a selection based on acquirer routing priorities.  Valid Values:  ACCEL_EXCHANGE_E  CU24_C  INTERLINK_G  MAESTRO_8  NYCE_Y  NYCE_F  PULSE_S  PULSE_L  PULSE_H  STAR_N  STAR_W  STAR_Z  STAR_Q  STAR_M  VISA_V 
    attr_accessor :sharing_group_code

    # This will send purpose of funds code for original credit transactions (OCTs). 
    attr_accessor :purpose_of_payment

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'business_application_id' => :'businessApplicationId',
        :'payouts_options' => :'payoutsOptions',
        :'fee_program_id' => :'feeProgramId',
        :'network_partner_id' => :'networkPartnerId',
        :'processing_code' => :'processingCode',
        :'sharing_group_code' => :'sharingGroupCode',
        :'purpose_of_payment' => :'purposeOfPayment'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'business_application_id' => :'business_application_id',
        :'payouts_options' => :'payouts_options',
        :'fee_program_id' => :'fee_program_id',
        :'network_partner_id' => :'network_partner_id',
        :'processing_code' => :'processing_code',
        :'sharing_group_code' => :'sharing_group_code',
        :'purpose_of_payment' => :'purpose_of_payment'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'business_application_id' => :'String',
        :'payouts_options' => :'Ptsv1pushfundstransferProcessingInformationPayoutsOptions',
        :'fee_program_id' => :'String',
        :'network_partner_id' => :'String',
        :'processing_code' => :'String',
        :'sharing_group_code' => :'String',
        :'purpose_of_payment' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'businessApplicationId')
        self.business_application_id = attributes[:'businessApplicationId']
      end

      if attributes.has_key?(:'payoutsOptions')
        self.payouts_options = attributes[:'payoutsOptions']
      end

      if attributes.has_key?(:'feeProgramId')
        self.fee_program_id = attributes[:'feeProgramId']
      end

      if attributes.has_key?(:'networkPartnerId')
        self.network_partner_id = attributes[:'networkPartnerId']
      end

      if attributes.has_key?(:'processingCode')
        self.processing_code = attributes[:'processingCode']
      end

      if attributes.has_key?(:'sharingGroupCode')
        self.sharing_group_code = attributes[:'sharingGroupCode']
      end

      if attributes.has_key?(:'purposeOfPayment')
        self.purpose_of_payment = attributes[:'purposeOfPayment']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      #if !@business_application_id.nil? && @business_application_id !~ Regexp.new(/^(\\s{0,2}|.{2})$/)
        #invalid_properties.push('invalid value for "business_application_id", must conform to the pattern /^(\\s{0,2}|.{2})$/.')
      #end

      #if !@fee_program_id.nil? && @fee_program_id !~ Regexp.new(/^(\\s{0,3}|[a-zA-Z0-9]{3})$/)
        #invalid_properties.push('invalid value for "fee_program_id", must conform to the pattern /^(\\s{0,3}|[a-zA-Z0-9]{3})$/.')
      #end

      #if !@processing_code.nil? && @processing_code !~ Regexp.new(/^(\\s{0,4}|\\d{4})$/)
        #invalid_properties.push('invalid value for "processing_code", must conform to the pattern /^(\\s{0,4}|\\d{4})$/.')
      #end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      #return false if !@business_application_id.nil? && @business_application_id !~ Regexp.new(/^(\\s{0,2}|.{2})$/)
      #return false if !@fee_program_id.nil? && @fee_program_id !~ Regexp.new(/^(\\s{0,3}|[a-zA-Z0-9]{3})$/)
      #return false if !@processing_code.nil? && @processing_code !~ Regexp.new(/^(\\s{0,4}|\\d{4})$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] business_application_id Value to be assigned
    def business_application_id=(business_application_id)
      #if !business_application_id.nil? && business_application_id !~ Regexp.new(/^(\\s{0,2}|.{2})$/)
        #fail ArgumentError, 'invalid value for "business_application_id", must conform to the pattern /^(\\s{0,2}|.{2})$/.'
      #end

      @business_application_id = business_application_id
    end

    # Custom attribute writer method with validation
    # @param [Object] fee_program_id Value to be assigned
    def fee_program_id=(fee_program_id)
      #if !fee_program_id.nil? && fee_program_id !~ Regexp.new(/^(\\s{0,3}|[a-zA-Z0-9]{3})$/)
        #fail ArgumentError, 'invalid value for "fee_program_id", must conform to the pattern /^(\\s{0,3}|[a-zA-Z0-9]{3})$/.'
      #end

      @fee_program_id = fee_program_id
    end

    # Custom attribute writer method with validation
    # @param [Object] network_partner_id Value to be assigned
    def network_partner_id=(network_partner_id)
      @network_partner_id = network_partner_id
    end

    # Custom attribute writer method with validation
    # @param [Object] processing_code Value to be assigned
    def processing_code=(processing_code)
      #if !processing_code.nil? && processing_code !~ Regexp.new(/^(\\s{0,4}|\\d{4})$/)
        #fail ArgumentError, 'invalid value for "processing_code", must conform to the pattern /^(\\s{0,4}|\\d{4})$/.'
      #end

      @processing_code = processing_code
    end

    # Custom attribute writer method with validation
    # @param [Object] sharing_group_code Value to be assigned
    def sharing_group_code=(sharing_group_code)
      @sharing_group_code = sharing_group_code
    end

    # Custom attribute writer method with validation
    # @param [Object] purpose_of_payment Value to be assigned
    def purpose_of_payment=(purpose_of_payment)
      @purpose_of_payment = purpose_of_payment
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          business_application_id == o.business_application_id &&
          payouts_options == o.payouts_options &&
          fee_program_id == o.fee_program_id &&
          network_partner_id == o.network_partner_id &&
          processing_code == o.processing_code &&
          sharing_group_code == o.sharing_group_code &&
          purpose_of_payment == o.purpose_of_payment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [business_application_id, payouts_options, fee_program_id, network_partner_id, processing_code, sharing_group_code, purpose_of_payment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
