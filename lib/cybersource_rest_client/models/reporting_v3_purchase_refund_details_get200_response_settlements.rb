=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'date'

module CyberSource
  class ReportingV3PurchaseRefundDetailsGet200ResponseSettlements
    # An unique identification number assigned by CyberSource to identify the submitted request.
    attr_accessor :request_id

    # Transaction Type
    attr_accessor :transaction_type

    # Submission Date
    attr_accessor :submission_time

    # Amount
    attr_accessor :amount

    # Valid ISO 4217 ALPHA-3 currency code
    attr_accessor :currency_code

    # payment method
    attr_accessor :payment_method

    # Solution Type (Wallet)
    attr_accessor :wallet_type

    # Payment Type
    attr_accessor :payment_type

    # Account Suffix
    attr_accessor :account_suffix

    # Cybersource Batch Time
    attr_accessor :cybersource_batch_time

    # Cybersource Batch Id
    attr_accessor :cybersource_batch_id

    # Card Type
    attr_accessor :card_type

    # Debit Network
    attr_accessor :debit_network

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'request_id' => :'requestId',
        :'transaction_type' => :'transactionType',
        :'submission_time' => :'submissionTime',
        :'amount' => :'amount',
        :'currency_code' => :'currencyCode',
        :'payment_method' => :'paymentMethod',
        :'wallet_type' => :'walletType',
        :'payment_type' => :'paymentType',
        :'account_suffix' => :'accountSuffix',
        :'cybersource_batch_time' => :'cybersourceBatchTime',
        :'cybersource_batch_id' => :'cybersourceBatchId',
        :'card_type' => :'cardType',
        :'debit_network' => :'debitNetwork'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'request_id' => :'request_id',
        :'transaction_type' => :'transaction_type',
        :'submission_time' => :'submission_time',
        :'amount' => :'amount',
        :'currency_code' => :'currency_code',
        :'payment_method' => :'payment_method',
        :'wallet_type' => :'wallet_type',
        :'payment_type' => :'payment_type',
        :'account_suffix' => :'account_suffix',
        :'cybersource_batch_time' => :'cybersource_batch_time',
        :'cybersource_batch_id' => :'cybersource_batch_id',
        :'card_type' => :'card_type',
        :'debit_network' => :'debit_network'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'request_id' => :'String',
        :'transaction_type' => :'String',
        :'submission_time' => :'DateTime',
        :'amount' => :'String',
        :'currency_code' => :'String',
        :'payment_method' => :'String',
        :'wallet_type' => :'String',
        :'payment_type' => :'String',
        :'account_suffix' => :'String',
        :'cybersource_batch_time' => :'DateTime',
        :'cybersource_batch_id' => :'String',
        :'card_type' => :'String',
        :'debit_network' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'requestId')
        self.request_id = attributes[:'requestId']
      end

      if attributes.has_key?(:'transactionType')
        self.transaction_type = attributes[:'transactionType']
      end

      if attributes.has_key?(:'submissionTime')
        self.submission_time = attributes[:'submissionTime']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'currencyCode')
        self.currency_code = attributes[:'currencyCode']
      end

      if attributes.has_key?(:'paymentMethod')
        self.payment_method = attributes[:'paymentMethod']
      end

      if attributes.has_key?(:'walletType')
        self.wallet_type = attributes[:'walletType']
      end

      if attributes.has_key?(:'paymentType')
        self.payment_type = attributes[:'paymentType']
      end

      if attributes.has_key?(:'accountSuffix')
        self.account_suffix = attributes[:'accountSuffix']
      end

      if attributes.has_key?(:'cybersourceBatchTime')
        self.cybersource_batch_time = attributes[:'cybersourceBatchTime']
      end

      if attributes.has_key?(:'cybersourceBatchId')
        self.cybersource_batch_id = attributes[:'cybersourceBatchId']
      end

      if attributes.has_key?(:'cardType')
        self.card_type = attributes[:'cardType']
      end

      if attributes.has_key?(:'debitNetwork')
        self.debit_network = attributes[:'debitNetwork']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          request_id == o.request_id &&
          transaction_type == o.transaction_type &&
          submission_time == o.submission_time &&
          amount == o.amount &&
          currency_code == o.currency_code &&
          payment_method == o.payment_method &&
          wallet_type == o.wallet_type &&
          payment_type == o.payment_type &&
          account_suffix == o.account_suffix &&
          cybersource_batch_time == o.cybersource_batch_time &&
          cybersource_batch_id == o.cybersource_batch_id &&
          card_type == o.card_type &&
          debit_network == o.debit_network
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [request_id, transaction_type, submission_time, amount, currency_code, payment_method, wallet_type, payment_type, account_suffix, cybersource_batch_time, cybersource_batch_id, card_type, debit_network].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
