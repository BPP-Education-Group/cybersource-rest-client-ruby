=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'date'

module CyberSource
  class PushFunds201ResponseProcessorInformation
    # Network transaction identifier (TID). This value can be used to identify a specific transaction when you are discussing the transaction with your processor. 
    attr_accessor :transaction_id

    # Transaction status from the processor. 
    attr_accessor :response_code

    # This field is returned by authorization and incremental authorization services. System trace number that must be printed on the customer's receipt. 
    attr_accessor :system_trace_audit_number

    # This field contains a number that is used with other data elements as a key to identify and track all messages related to a given cardholder transaction; that is, to a given transaction set.  Recommended format: ydddhhnnnnnn  Positions 1-4: The yddd equivalent of the date, where y = 0-9 and ddd = 001 â€“ 366. Positions 5-12: A unique identification number generated by the merchant or assigned by Cybersource. 
    attr_accessor :retrieval_reference_number

    # The results of the transaction request  Note: The VisaNet Response Code for the transaction 
    attr_accessor :action_code

    # Issuer-generated approval code for the transaction. 
    attr_accessor :approval_code

    # This field identifies the interchange fee program applicable to each financial transaction. Fee program indicator (FPI) values correspond to the fee descriptor and rate for each existing fee program. 
    attr_accessor :fee_program_indicator

    # Name of the processor. 
    attr_accessor :name

    attr_accessor :routing

    attr_accessor :settlement

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transaction_id' => :'transactionId',
        :'response_code' => :'responseCode',
        :'system_trace_audit_number' => :'systemTraceAuditNumber',
        :'retrieval_reference_number' => :'retrievalReferenceNumber',
        :'action_code' => :'actionCode',
        :'approval_code' => :'approvalCode',
        :'fee_program_indicator' => :'feeProgramIndicator',
        :'name' => :'name',
        :'routing' => :'routing',
        :'settlement' => :'settlement'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'transaction_id' => :'transaction_id',
        :'response_code' => :'response_code',
        :'system_trace_audit_number' => :'system_trace_audit_number',
        :'retrieval_reference_number' => :'retrieval_reference_number',
        :'action_code' => :'action_code',
        :'approval_code' => :'approval_code',
        :'fee_program_indicator' => :'fee_program_indicator',
        :'name' => :'name',
        :'routing' => :'routing',
        :'settlement' => :'settlement'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'transaction_id' => :'Integer',
        :'response_code' => :'String',
        :'system_trace_audit_number' => :'String',
        :'retrieval_reference_number' => :'String',
        :'action_code' => :'String',
        :'approval_code' => :'String',
        :'fee_program_indicator' => :'String',
        :'name' => :'String',
        :'routing' => :'PushFunds201ResponseProcessorInformationRouting',
        :'settlement' => :'PushFunds201ResponseProcessorInformationSettlement'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'transactionId')
        self.transaction_id = attributes[:'transactionId']
      end

      if attributes.has_key?(:'responseCode')
        self.response_code = attributes[:'responseCode']
      end

      if attributes.has_key?(:'systemTraceAuditNumber')
        self.system_trace_audit_number = attributes[:'systemTraceAuditNumber']
      end

      if attributes.has_key?(:'retrievalReferenceNumber')
        self.retrieval_reference_number = attributes[:'retrievalReferenceNumber']
      end

      if attributes.has_key?(:'actionCode')
        self.action_code = attributes[:'actionCode']
      end

      if attributes.has_key?(:'approvalCode')
        self.approval_code = attributes[:'approvalCode']
      end

      if attributes.has_key?(:'feeProgramIndicator')
        self.fee_program_indicator = attributes[:'feeProgramIndicator']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'routing')
        self.routing = attributes[:'routing']
      end

      if attributes.has_key?(:'settlement')
        self.settlement = attributes[:'settlement']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] response_code Value to be assigned
    def response_code=(response_code)
      @response_code = response_code
    end

    # Custom attribute writer method with validation
    # @param [Object] system_trace_audit_number Value to be assigned
    def system_trace_audit_number=(system_trace_audit_number)
      @system_trace_audit_number = system_trace_audit_number
    end

    # Custom attribute writer method with validation
    # @param [Object] retrieval_reference_number Value to be assigned
    def retrieval_reference_number=(retrieval_reference_number)
      @retrieval_reference_number = retrieval_reference_number
    end

    # Custom attribute writer method with validation
    # @param [Object] action_code Value to be assigned
    def action_code=(action_code)
      @action_code = action_code
    end

    # Custom attribute writer method with validation
    # @param [Object] approval_code Value to be assigned
    def approval_code=(approval_code)
      @approval_code = approval_code
    end

    # Custom attribute writer method with validation
    # @param [Object] fee_program_indicator Value to be assigned
    def fee_program_indicator=(fee_program_indicator)
      @fee_program_indicator = fee_program_indicator
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      @name = name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transaction_id == o.transaction_id &&
          response_code == o.response_code &&
          system_trace_audit_number == o.system_trace_audit_number &&
          retrieval_reference_number == o.retrieval_reference_number &&
          action_code == o.action_code &&
          approval_code == o.approval_code &&
          fee_program_indicator == o.fee_program_indicator &&
          name == o.name &&
          routing == o.routing &&
          settlement == o.settlement
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [transaction_id, response_code, system_trace_audit_number, retrieval_reference_number, action_code, approval_code, fee_program_indicator, name, routing, settlement].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
