=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'date'

module CyberSource
  class TmsNetworkTokenServicesAmericanExpressTokenService
    # Indicates if the service for network tokens for the American Express card association are enabled
    attr_accessor :enable_service

    # Indicates if network tokens for the American Express card association are enabled for transactions
    attr_accessor :enable_transactional_tokens

    # Token Requestor ID provided by American Express during the registration process for the Tokenization Service  Pattern: ^[0-9]{11}\\\\z$\" Min Length: 11 Max Length: 11 Example: \"12345678912\" 
    attr_accessor :token_requestor_id

    # SE Number assigned by American Express for the merchant's account  Pattern: \"^[0-9]{11}\\\\z$\" Min Length: 10 Max Length: 10 Example: \"9876543212\" 
    attr_accessor :se_number

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'enable_service' => :'enableService',
        :'enable_transactional_tokens' => :'enableTransactionalTokens',
        :'token_requestor_id' => :'tokenRequestorId',
        :'se_number' => :'seNumber'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'enable_service' => :'enable_service',
        :'enable_transactional_tokens' => :'enable_transactional_tokens',
        :'token_requestor_id' => :'token_requestor_id',
        :'se_number' => :'se_number'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'enable_service' => :'BOOLEAN',
        :'enable_transactional_tokens' => :'BOOLEAN',
        :'token_requestor_id' => :'String',
        :'se_number' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'enableService')
        self.enable_service = attributes[:'enableService']
      end

      if attributes.has_key?(:'enableTransactionalTokens')
        self.enable_transactional_tokens = attributes[:'enableTransactionalTokens']
      end

      if attributes.has_key?(:'tokenRequestorId')
        self.token_requestor_id = attributes[:'tokenRequestorId']
      end

      if attributes.has_key?(:'seNumber')
        self.se_number = attributes[:'seNumber']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      #if !@token_requestor_id.nil? && @token_requestor_id !~ Regexp.new(/^[0-9]{11}\\\\z$\"/)
        #invalid_properties.push('invalid value for "token_requestor_id", must conform to the pattern /^[0-9]{11}\\\\z$\"/.')
      #end

      #if !@se_number.nil? && @se_number !~ Regexp.new(/^[0-9]{11}\\z$/)
        #invalid_properties.push('invalid value for "se_number", must conform to the pattern /^[0-9]{11}\\z$/.')
      #end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      #return false if !@token_requestor_id.nil? && @token_requestor_id !~ Regexp.new(/^[0-9]{11}\\\\z$\"/)
      #return false if !@se_number.nil? && @se_number !~ Regexp.new(/^[0-9]{11}\\z$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] token_requestor_id Value to be assigned
    def token_requestor_id=(token_requestor_id)
      #if !token_requestor_id.nil? && token_requestor_id !~ Regexp.new(/^[0-9]{11}\\\\z$\"/)
        #fail ArgumentError, 'invalid value for "token_requestor_id", must conform to the pattern /^[0-9]{11}\\\\z$\"/.'
      #end

      @token_requestor_id = token_requestor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] se_number Value to be assigned
    def se_number=(se_number)
      #if !se_number.nil? && se_number !~ Regexp.new(/^[0-9]{11}\\z$/)
        #fail ArgumentError, 'invalid value for "se_number", must conform to the pattern /^[0-9]{11}\\z$/.'
      #end

      @se_number = se_number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          enable_service == o.enable_service &&
          enable_transactional_tokens == o.enable_transactional_tokens &&
          token_requestor_id == o.token_requestor_id &&
          se_number == o.se_number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [enable_service, enable_transactional_tokens, token_requestor_id, se_number].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
